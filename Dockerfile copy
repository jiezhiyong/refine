FROM refinedev/node:18 AS base

# 添加构建参数以支持不同环境
ARG BUILD_ENV=production
# 添加应用目录名变量 // TODO: 需要按实际应用目录替换目录`refine`
ARG APP_DIR=refine
# 添加用户名变量
ARG APP_USER=root
# 添加 npm 镜像源配置
ARG NPM_REGISTRY=https://registry.npmmirror.com

# 在基础镜像中安装 pnpm 并设置 npm 和 pnpm 的镜像源
RUN npm install -g pnpm && \
    npm config set registry ${NPM_REGISTRY} && \
    pnpm config set registry ${NPM_REGISTRY}

FROM base as deps

COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./

RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

FROM base as builder

# 设置构建参数
ARG BUILD_ENV
ENV BUILD_ENV=${BUILD_ENV}
ARG APP_DIR
ENV APP_DIR=${APP_DIR}
ARG APP_USER
ENV APP_USER=${APP_USER}

COPY --from=deps /app/${APP_DIR}/node_modules ./node_modules

COPY . .

# 根据构建环境参数执行不同的构建命令
RUN if [ "$BUILD_ENV" = "inte" ]; then \
      echo "Building for integration environment..."; \
      cp .env.inte .env; \
    elif [ "$BUILD_ENV" = "rc" ]; then \
      echo "Building for release candidate environment..."; \
      cp .env.rc .env; \
    else \
      echo "Building for production environment..."; \
      cp .env.production .env 2>/dev/null || echo "No production env file found, using defaults"; \
    fi && \
    pnpm run build

FROM base as production-deps

COPY --from=deps /app/${APP_DIR}/node_modules ./node_modules

COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./

ENV NODE_ENV production

RUN pnpm prune

FROM base AS runner

# 设置运行时环境变量
ARG BUILD_ENV
ARG APP_DIR
ARG APP_USER
ENV NODE_ENV production
ENV BUILD_ENV=${BUILD_ENV}
ENV APP_DIR=${APP_DIR}
ENV APP_USER=${APP_USER}

COPY --from=production-deps --chown=${APP_USER}:nodejs /app/${APP_DIR}/node_modules ./node_modules
COPY --from=builder --chown=${APP_USER}:nodejs /app/${APP_DIR}/build ./build
COPY --from=builder --chown=${APP_USER}:nodejs /app/${APP_DIR}/public ./public
COPY --from=builder --chown=${APP_USER}:nodejs /app/${APP_DIR}/package.json ./package.json

# 复制构建阶段创建的 .env 文件
COPY --from=builder --chown=${APP_USER}:nodejs /app/${APP_DIR}/.env ./.env

USER ${APP_USER}

CMD ["pnpm", "run", "start"]