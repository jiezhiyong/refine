openapi: 3.1.0
info:
  title: OpenAPI - NODE CRUD
  version: 1.0.0
  description: ...
tags:
  - name: user
    description: User operations
  - name: role
    description: Role operations
  - name: userRole
    description: UserRole operations
  - name: post
    description: Post operations
  - name: category
    description: Category operations
  - name: casbinRule
    description: CasbinRule operations
  - name: frontRouteProject
    description: FrontRouteProject operations
  - name: frontRouteModule
    description: FrontRouteModule operations
  - name: auditRecord
    description: AuditRecord operations
  - name: log
    description: Log operations
  - name: menu
    description: Menu operations
  - name: dynamicPage
    description: DynamicPage operations
components:
  schemas:
    _AnyObject:
      type: object
      additionalProperties: true
    AuthProvider:
      type: string
      enum:
        - USER_PASS
        - TC_SHUKE
    PostStatus:
      type: string
      enum:
        - DRAFT
        - PUBLISHED
        - REJECTED
    AuditStatus:
      type: string
      enum:
        - PENDING
        - RESOLVED
        - REJECTED
        - FAILED
    AuditChannel:
      type: string
      enum:
        - TIAN_YUAN
        - SELF
    LogAction:
      type: string
      enum:
        - create
        - createMany
        - delete
        - deleteMany
        - update
        - updateMany
    User:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        email:
          type: string
        name:
          type: string
        avatar:
          oneOf:
            - type: "null"
            - type: string
        provider:
          $ref: "#/components/schemas/AuthProvider"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"
        role:
          oneOf:
            - type: "null"
            - type: string
        password:
          oneOf:
            - type: "null"
            - type: string
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        frontRouteProjects:
          type: array
          items:
            $ref: "#/components/schemas/FrontRouteProject"
        frontRouteModules:
          type: array
          items:
            $ref: "#/components/schemas/FrontRouteModule"
        logs:
          type: array
          items:
            $ref: "#/components/schemas/Log"
        auditRecords:
          type: array
          items:
            $ref: "#/components/schemas/AuditRecord"
      required:
        - id
        - createdAt
        - email
        - name
        - provider
    Role:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          type: string
        description:
          type: string
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"
      required:
        - id
        - createdAt
        - title
        - description
    UserRole:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        user:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/User"
        userId:
          type: string
        role:
          $ref: "#/components/schemas/Role"
        roleId:
          type: string
      required:
        - id
        - createdAt
        - userId
        - role
        - roleId
    Post:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        operatedBy:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/User"
        title:
          type: string
        content:
          type: string
        hit:
          type: integer
        like:
          type: integer
        image:
          oneOf:
            - type: "null"
            - type: string
        status:
          $ref: "#/components/schemas/PostStatus"
        category:
          $ref: "#/components/schemas/Category"
        categoryId:
          type: string
      required:
        - id
        - createdAt
        - title
        - content
        - hit
        - like
        - status
        - category
        - categoryId
    Category:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
      required:
        - id
        - createdAt
        - title
    CasbinRule:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        ptype:
          type: string
        v0:
          type: string
        v1:
          type: string
        v2:
          type: string
        v3:
          oneOf:
            - type: "null"
            - type: string
        v4:
          oneOf:
            - type: "null"
            - type: string
      required:
        - id
        - createdAt
        - ptype
        - v0
        - v1
        - v2
    FrontRouteProject:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        operatedBy:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/User"
        title:
          type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        global: {}
        modules:
          type: array
          items:
            $ref: "#/components/schemas/FrontRouteModule"
      required:
        - id
        - createdAt
        - title
        - global
    FrontRouteModule:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        operatedBy:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/User"
        title:
          type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        pathReplaceProject:
          oneOf:
            - type: "null"
            - type: string
        pathReplaceModule:
          oneOf:
            - type: "null"
            - type: string
        global:
          oneOf:
            - type: "null"
            - {}
        project:
          $ref: "#/components/schemas/FrontRouteProject"
        projectId:
          type: string
      required:
        - id
        - createdAt
        - title
        - project
        - projectId
    AuditRecord:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        operatedBy:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/User"
        title:
          type: string
        dataPrevious:
          oneOf:
            - type: "null"
            - {}
        data:
          oneOf:
            - type: "null"
            - {}
        meta: {}
        resource:
          type: string
        error:
          oneOf:
            - type: "null"
            - type: string
        status:
          $ref: "#/components/schemas/AuditStatus"
        channel:
          $ref: "#/components/schemas/AuditChannel"
        action:
          $ref: "#/components/schemas/LogAction"
      required:
        - id
        - createdAt
        - title
        - meta
        - resource
        - status
        - channel
        - action
    Log:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        operatedBy:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/User"
        resource:
          type: string
        action:
          $ref: "#/components/schemas/LogAction"
        data:
          oneOf:
            - type: "null"
            - {}
        dataPrevious:
          oneOf:
            - type: "null"
            - {}
        meta:
          oneOf:
            - type: "null"
            - {}
      required:
        - id
        - createdAt
        - resource
        - action
    Menu:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        name:
          type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        order:
          oneOf:
            - type: "null"
            - type: integer
        isActive:
          oneOf:
            - type: "null"
            - type: boolean
        list:
          oneOf:
            - type: "null"
            - type: string
        create:
          oneOf:
            - type: "null"
            - type: string
        edit:
          oneOf:
            - type: "null"
            - type: string
        show:
          oneOf:
            - type: "null"
            - type: string
        clone:
          oneOf:
            - type: "null"
            - type: string
        meta:
          oneOf:
            - type: "null"
            - {}
      required:
        - id
        - createdAt
        - name
    DynamicPage:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        path:
          type: string
        title:
          type: string
        isActive:
          oneOf:
            - type: "null"
            - type: boolean
        enableCreate:
          oneOf:
            - type: "null"
            - type: boolean
        enableDelete:
          oneOf:
            - type: "null"
            - type: boolean
        enableEdit:
          oneOf:
            - type: "null"
            - type: boolean
        enableClone:
          oneOf:
            - type: "null"
            - type: boolean
        db:
          type: string
        tableSql:
          type: string
        tableRecordLink:
          oneOf:
            - type: "null"
            - {}
        formField:
          oneOf:
            - type: "null"
            - {}
        meta:
          oneOf:
            - type: "null"
            - {}
      required:
        - id
        - createdAt
        - path
        - title
        - db
        - tableSql
    AggregateUser:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserMaxAggregateOutputType"
    UserGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        email:
          type: string
        name:
          type: string
        avatar:
          oneOf:
            - type: "null"
            - type: string
        provider:
          $ref: "#/components/schemas/AuthProvider"
        role:
          oneOf:
            - type: "null"
            - type: string
        password:
          oneOf:
            - type: "null"
            - type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - email
        - name
        - provider
    AggregateRole:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/RoleCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/RoleMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/RoleMaxAggregateOutputType"
    RoleGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          type: string
        description:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/RoleCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/RoleMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/RoleMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - title
        - description
    AggregateUserRole:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserRoleCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserRoleMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserRoleMaxAggregateOutputType"
    UserRoleGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        userId:
          type: string
        roleId:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserRoleCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserRoleMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserRoleMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - userId
        - roleId
    AggregatePost:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostMaxAggregateOutputType"
    PostGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          type: string
        content:
          type: string
        hit:
          type: integer
        like:
          type: integer
        image:
          oneOf:
            - type: "null"
            - type: string
        status:
          $ref: "#/components/schemas/PostStatus"
        categoryId:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - title
        - content
        - hit
        - like
        - status
        - categoryId
    AggregateCategory:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CategoryCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CategoryMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CategoryMaxAggregateOutputType"
    CategoryGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CategoryCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CategoryMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CategoryMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - title
    AggregateCasbinRule:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CasbinRuleCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CasbinRuleMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CasbinRuleMaxAggregateOutputType"
    CasbinRuleGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        ptype:
          type: string
        v0:
          type: string
        v1:
          type: string
        v2:
          type: string
        v3:
          oneOf:
            - type: "null"
            - type: string
        v4:
          oneOf:
            - type: "null"
            - type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CasbinRuleCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CasbinRuleMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/CasbinRuleMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - ptype
        - v0
        - v1
        - v2
    AggregateFrontRouteProject:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteProjectCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteProjectMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteProjectMaxAggregateOutputType"
    FrontRouteProjectGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        global: {}
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteProjectCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteProjectMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteProjectMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - title
        - global
    AggregateFrontRouteModule:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteModuleCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteModuleMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteModuleMaxAggregateOutputType"
    FrontRouteModuleGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        pathReplaceProject:
          oneOf:
            - type: "null"
            - type: string
        pathReplaceModule:
          oneOf:
            - type: "null"
            - type: string
        global:
          oneOf:
            - type: "null"
            - {}
        projectId:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteModuleCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteModuleMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FrontRouteModuleMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - title
        - projectId
    AggregateAuditRecord:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditRecordCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditRecordMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditRecordMaxAggregateOutputType"
    AuditRecordGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          type: string
        dataPrevious:
          oneOf:
            - type: "null"
            - {}
        data:
          oneOf:
            - type: "null"
            - {}
        meta: {}
        resource:
          type: string
        error:
          oneOf:
            - type: "null"
            - type: string
        status:
          $ref: "#/components/schemas/AuditStatus"
        channel:
          $ref: "#/components/schemas/AuditChannel"
        action:
          $ref: "#/components/schemas/LogAction"
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditRecordCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditRecordMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditRecordMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - title
        - meta
        - resource
        - status
        - channel
        - action
    AggregateLog:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogMaxAggregateOutputType"
    LogGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        resource:
          type: string
        action:
          $ref: "#/components/schemas/LogAction"
        data:
          oneOf:
            - type: "null"
            - {}
        dataPrevious:
          oneOf:
            - type: "null"
            - {}
        meta:
          oneOf:
            - type: "null"
            - {}
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - resource
        - action
    AggregateMenu:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuMaxAggregateOutputType"
    MenuGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        name:
          type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        order:
          oneOf:
            - type: "null"
            - type: integer
        isActive:
          oneOf:
            - type: "null"
            - type: boolean
        list:
          oneOf:
            - type: "null"
            - type: string
        create:
          oneOf:
            - type: "null"
            - type: string
        edit:
          oneOf:
            - type: "null"
            - type: string
        show:
          oneOf:
            - type: "null"
            - type: string
        clone:
          oneOf:
            - type: "null"
            - type: string
        meta:
          oneOf:
            - type: "null"
            - {}
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuCountAggregateOutputType"
        _avg:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuAvgAggregateOutputType"
        _sum:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuSumAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/MenuMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - name
    AggregateDynamicPage:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DynamicPageCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DynamicPageMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DynamicPageMaxAggregateOutputType"
    DynamicPageGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        path:
          type: string
        title:
          type: string
        isActive:
          oneOf:
            - type: "null"
            - type: boolean
        enableCreate:
          oneOf:
            - type: "null"
            - type: boolean
        enableDelete:
          oneOf:
            - type: "null"
            - type: boolean
        enableEdit:
          oneOf:
            - type: "null"
            - type: boolean
        enableClone:
          oneOf:
            - type: "null"
            - type: boolean
        db:
          type: string
        tableSql:
          type: string
        tableRecordLink:
          oneOf:
            - type: "null"
            - {}
        formField:
          oneOf:
            - type: "null"
            - {}
        meta:
          oneOf:
            - type: "null"
            - {}
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DynamicPageCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DynamicPageMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DynamicPageMaxAggregateOutputType"
      required:
        - id
        - createdAt
        - path
        - title
        - db
        - tableSql
    UserCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        email:
          type: integer
        name:
          type: integer
        avatar:
          type: integer
        provider:
          type: integer
        role:
          type: integer
        password:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - email
        - name
        - avatar
        - provider
        - role
        - password
        - _all
    UserMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        email:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        avatar:
          oneOf:
            - type: "null"
            - type: string
        provider:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuthProvider"
        role:
          oneOf:
            - type: "null"
            - type: string
        password:
          oneOf:
            - type: "null"
            - type: string
    UserMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        email:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        avatar:
          oneOf:
            - type: "null"
            - type: string
        provider:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuthProvider"
        role:
          oneOf:
            - type: "null"
            - type: string
        password:
          oneOf:
            - type: "null"
            - type: string
    RoleCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        title:
          type: integer
        description:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - title
        - description
        - _all
    RoleMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
    RoleMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
    UserRoleCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        userId:
          type: integer
        roleId:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - userId
        - roleId
        - _all
    UserRoleMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        userId:
          oneOf:
            - type: "null"
            - type: string
        roleId:
          oneOf:
            - type: "null"
            - type: string
    UserRoleMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        userId:
          oneOf:
            - type: "null"
            - type: string
        roleId:
          oneOf:
            - type: "null"
            - type: string
    PostCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        title:
          type: integer
        content:
          type: integer
        hit:
          type: integer
        like:
          type: integer
        image:
          type: integer
        status:
          type: integer
        categoryId:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - title
        - content
        - hit
        - like
        - image
        - status
        - categoryId
        - _all
    PostAvgAggregateOutputType:
      type: object
      properties:
        hit:
          oneOf:
            - type: "null"
            - type: number
        like:
          oneOf:
            - type: "null"
            - type: number
    PostSumAggregateOutputType:
      type: object
      properties:
        hit:
          oneOf:
            - type: "null"
            - type: integer
        like:
          oneOf:
            - type: "null"
            - type: integer
    PostMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        content:
          oneOf:
            - type: "null"
            - type: string
        hit:
          oneOf:
            - type: "null"
            - type: integer
        like:
          oneOf:
            - type: "null"
            - type: integer
        image:
          oneOf:
            - type: "null"
            - type: string
        status:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostStatus"
        categoryId:
          oneOf:
            - type: "null"
            - type: string
    PostMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        content:
          oneOf:
            - type: "null"
            - type: string
        hit:
          oneOf:
            - type: "null"
            - type: integer
        like:
          oneOf:
            - type: "null"
            - type: integer
        image:
          oneOf:
            - type: "null"
            - type: string
        status:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/PostStatus"
        categoryId:
          oneOf:
            - type: "null"
            - type: string
    CategoryCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        title:
          type: integer
        description:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - title
        - description
        - _all
    CategoryMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
    CategoryMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
    CasbinRuleCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        ptype:
          type: integer
        v0:
          type: integer
        v1:
          type: integer
        v2:
          type: integer
        v3:
          type: integer
        v4:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - ptype
        - v0
        - v1
        - v2
        - v3
        - v4
        - _all
    CasbinRuleMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        ptype:
          oneOf:
            - type: "null"
            - type: string
        v0:
          oneOf:
            - type: "null"
            - type: string
        v1:
          oneOf:
            - type: "null"
            - type: string
        v2:
          oneOf:
            - type: "null"
            - type: string
        v3:
          oneOf:
            - type: "null"
            - type: string
        v4:
          oneOf:
            - type: "null"
            - type: string
    CasbinRuleMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        ptype:
          oneOf:
            - type: "null"
            - type: string
        v0:
          oneOf:
            - type: "null"
            - type: string
        v1:
          oneOf:
            - type: "null"
            - type: string
        v2:
          oneOf:
            - type: "null"
            - type: string
        v3:
          oneOf:
            - type: "null"
            - type: string
        v4:
          oneOf:
            - type: "null"
            - type: string
    FrontRouteProjectCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        title:
          type: integer
        description:
          type: integer
        global:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - title
        - description
        - global
        - _all
    FrontRouteProjectMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
    FrontRouteProjectMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
    FrontRouteModuleCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        title:
          type: integer
        description:
          type: integer
        pathReplaceProject:
          type: integer
        pathReplaceModule:
          type: integer
        global:
          type: integer
        projectId:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - title
        - description
        - pathReplaceProject
        - pathReplaceModule
        - global
        - projectId
        - _all
    FrontRouteModuleMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        pathReplaceProject:
          oneOf:
            - type: "null"
            - type: string
        pathReplaceModule:
          oneOf:
            - type: "null"
            - type: string
        projectId:
          oneOf:
            - type: "null"
            - type: string
    FrontRouteModuleMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        description:
          oneOf:
            - type: "null"
            - type: string
        pathReplaceProject:
          oneOf:
            - type: "null"
            - type: string
        pathReplaceModule:
          oneOf:
            - type: "null"
            - type: string
        projectId:
          oneOf:
            - type: "null"
            - type: string
    AuditRecordCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        title:
          type: integer
        dataPrevious:
          type: integer
        data:
          type: integer
        meta:
          type: integer
        resource:
          type: integer
        error:
          type: integer
        status:
          type: integer
        channel:
          type: integer
        action:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - title
        - dataPrevious
        - data
        - meta
        - resource
        - error
        - status
        - channel
        - action
        - _all
    AuditRecordMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        resource:
          oneOf:
            - type: "null"
            - type: string
        error:
          oneOf:
            - type: "null"
            - type: string
        status:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditStatus"
        channel:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditChannel"
        action:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogAction"
    AuditRecordMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        resource:
          oneOf:
            - type: "null"
            - type: string
        error:
          oneOf:
            - type: "null"
            - type: string
        status:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditStatus"
        channel:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/AuditChannel"
        action:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogAction"
    LogCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        resource:
          type: integer
        action:
          type: integer
        data:
          type: integer
        dataPrevious:
          type: integer
        meta:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - resource
        - action
        - data
        - dataPrevious
        - meta
        - _all
    LogMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        resource:
          oneOf:
            - type: "null"
            - type: string
        action:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogAction"
    LogMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        resource:
          oneOf:
            - type: "null"
            - type: string
        action:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/LogAction"
    MenuCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        name:
          type: integer
        title:
          type: integer
        order:
          type: integer
        isActive:
          type: integer
        list:
          type: integer
        create:
          type: integer
        edit:
          type: integer
        show:
          type: integer
        clone:
          type: integer
        meta:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - name
        - title
        - order
        - isActive
        - list
        - create
        - edit
        - show
        - clone
        - meta
        - _all
    MenuAvgAggregateOutputType:
      type: object
      properties:
        order:
          oneOf:
            - type: "null"
            - type: number
    MenuSumAggregateOutputType:
      type: object
      properties:
        order:
          oneOf:
            - type: "null"
            - type: integer
    MenuMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        order:
          oneOf:
            - type: "null"
            - type: integer
        isActive:
          oneOf:
            - type: "null"
            - type: boolean
        list:
          oneOf:
            - type: "null"
            - type: string
        create:
          oneOf:
            - type: "null"
            - type: string
        edit:
          oneOf:
            - type: "null"
            - type: string
        show:
          oneOf:
            - type: "null"
            - type: string
        clone:
          oneOf:
            - type: "null"
            - type: string
    MenuMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        order:
          oneOf:
            - type: "null"
            - type: integer
        isActive:
          oneOf:
            - type: "null"
            - type: boolean
        list:
          oneOf:
            - type: "null"
            - type: string
        create:
          oneOf:
            - type: "null"
            - type: string
        edit:
          oneOf:
            - type: "null"
            - type: string
        show:
          oneOf:
            - type: "null"
            - type: string
        clone:
          oneOf:
            - type: "null"
            - type: string
    DynamicPageCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer
        operatedById:
          type: integer
        path:
          type: integer
        title:
          type: integer
        isActive:
          type: integer
        enableCreate:
          type: integer
        enableDelete:
          type: integer
        enableEdit:
          type: integer
        enableClone:
          type: integer
        db:
          type: integer
        tableSql:
          type: integer
        tableRecordLink:
          type: integer
        formField:
          type: integer
        meta:
          type: integer
        _all:
          type: integer
      required:
        - id
        - deleted
        - createdAt
        - updatedAt
        - operatedById
        - path
        - title
        - isActive
        - enableCreate
        - enableDelete
        - enableEdit
        - enableClone
        - db
        - tableSql
        - tableRecordLink
        - formField
        - meta
        - _all
    DynamicPageMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        path:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        isActive:
          oneOf:
            - type: "null"
            - type: boolean
        enableCreate:
          oneOf:
            - type: "null"
            - type: boolean
        enableDelete:
          oneOf:
            - type: "null"
            - type: boolean
        enableEdit:
          oneOf:
            - type: "null"
            - type: boolean
        enableClone:
          oneOf:
            - type: "null"
            - type: boolean
        db:
          oneOf:
            - type: "null"
            - type: string
        tableSql:
          oneOf:
            - type: "null"
            - type: string
    DynamicPageMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        deleted:
          oneOf:
            - type: "null"
            - type: boolean
        createdAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        updatedAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        operatedById:
          oneOf:
            - type: "null"
            - type: string
        path:
          oneOf:
            - type: "null"
            - type: string
        title:
          oneOf:
            - type: "null"
            - type: string
        isActive:
          oneOf:
            - type: "null"
            - type: boolean
        enableCreate:
          oneOf:
            - type: "null"
            - type: boolean
        enableDelete:
          oneOf:
            - type: "null"
            - type: boolean
        enableEdit:
          oneOf:
            - type: "null"
            - type: boolean
        enableClone:
          oneOf:
            - type: "null"
            - type: boolean
        db:
          oneOf:
            - type: "null"
            - type: string
        tableSql:
          oneOf:
            - type: "null"
            - type: string
    _Meta:
      type: object
      description: Meta information about the request or response
      properties:
        serialization:
          description: Serialization metadata
      additionalProperties: true
    _Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            prisma:
              type: boolean
              description: Indicates if the error occurred during a Prisma call
            rejectedByPolicy:
              type: boolean
              description: Indicates if the error was due to rejection by a policy
            code:
              type: string
              description: Prisma error code. Only available when "prisma" field is true.
            message:
              type: string
              description: Error message
            reason:
              type: string
              description: Detailed error reason
            zodErrors:
              type: object
              additionalProperties: true
              description: Zod validation errors if the error is due to data validation
                failure
          additionalProperties: true
    BatchPayload:
      type: object
      properties:
        count:
          type: integer
    UserCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    UserFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    RoleGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserRoleGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    PostFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        _sum:
          $ref: "#/components/schemas/_AnyObject"
        _avg:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    PostGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        _sum:
          $ref: "#/components/schemas/_AnyObject"
        _avg:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CategoryGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    CasbinRuleGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteProjectGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    FrontRouteModuleGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    AuditRecordGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    LogFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        include:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    LogGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        _sum:
          $ref: "#/components/schemas/_AnyObject"
        _avg:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    MenuGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        _sum:
          $ref: "#/components/schemas/_AnyObject"
        _avg:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/_AnyObject"
            - type: array
              items:
                $ref: "#/components/schemas/_AnyObject"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        data:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        create:
          $ref: "#/components/schemas/_AnyObject"
        update:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/_AnyObject"
        where:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        cursor:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
    DynamicPageGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/_AnyObject"
        orderBy:
          $ref: "#/components/schemas/_AnyObject"
        by:
          $ref: "#/components/schemas/_AnyObject"
        having:
          $ref: "#/components/schemas/_AnyObject"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/_AnyObject"
        _min:
          $ref: "#/components/schemas/_AnyObject"
        _max:
          $ref: "#/components/schemas/_AnyObject"
        meta:
          $ref: "#/components/schemas/_Meta"
paths:
  /api/user/create:
    post:
      operationId: createUser
      description: Create a new User
      tags:
        - user
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateArgs"
  /api/user/createMany:
    post:
      operationId: createManyUser
      description: Create several User
      tags:
        - user
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateManyArgs"
  /api/user/findUnique:
    get:
      operationId: findUniqueUser
      description: Find one unique User
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/user/findFirst:
    get:
      operationId: findFirstUser
      description: Find the first User matching the given condition
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/user/findMany:
    get:
      operationId: findManyUser
      description: Find a list of User
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/user/update:
    patch:
      operationId: updateUser
      description: Update a User
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateArgs"
  /api/user/updateMany:
    patch:
      operationId: updateManyUser
      description: Update Users matching the given condition
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateManyArgs"
  /api/user/upsert:
    post:
      operationId: upsertUser
      description: Upsert a User
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpsertArgs"
  /api/user/delete:
    delete:
      operationId: deleteUser
      description: Delete one unique User
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/user/deleteMany:
    delete:
      operationId: deleteManyUser
      description: Delete Users matching the given condition
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/user/count:
    get:
      operationId: countUser
      description: Find a list of User
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/UserCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/user/aggregate:
    get:
      operationId: aggregateUser
      description: Aggregate Users
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateUser"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/user/groupBy:
    get:
      operationId: groupByUser
      description: Group Users by fields
      tags:
        - user
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/role/create:
    post:
      operationId: createRole
      description: Create a new Role
      tags:
        - role
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Role"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreateArgs"
  /api/role/createMany:
    post:
      operationId: createManyRole
      description: Create several Role
      tags:
        - role
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreateManyArgs"
  /api/role/findUnique:
    get:
      operationId: findUniqueRole
      description: Find one unique Role
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Role"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/role/findFirst:
    get:
      operationId: findFirstRole
      description: Find the first Role matching the given condition
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Role"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/role/findMany:
    get:
      operationId: findManyRole
      description: Find a list of Role
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Role"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/role/update:
    patch:
      operationId: updateRole
      description: Update a Role
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Role"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUpdateArgs"
  /api/role/updateMany:
    patch:
      operationId: updateManyRole
      description: Update Roles matching the given condition
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUpdateManyArgs"
  /api/role/upsert:
    post:
      operationId: upsertRole
      description: Upsert a Role
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Role"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUpsertArgs"
  /api/role/delete:
    delete:
      operationId: deleteRole
      description: Delete one unique Role
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Role"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/role/deleteMany:
    delete:
      operationId: deleteManyRole
      description: Delete Roles matching the given condition
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/role/count:
    get:
      operationId: countRole
      description: Find a list of Role
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/RoleCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/role/aggregate:
    get:
      operationId: aggregateRole
      description: Aggregate Roles
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/role/groupBy:
    get:
      operationId: groupByRole
      description: Group Roles by fields
      tags:
        - role
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/RoleGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/userRole/create:
    post:
      operationId: createUserRole
      description: Create a new UserRole
      tags:
        - userRole
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/UserRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRoleCreateArgs"
  /api/userRole/createMany:
    post:
      operationId: createManyUserRole
      description: Create several UserRole
      tags:
        - userRole
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRoleCreateManyArgs"
  /api/userRole/findUnique:
    get:
      operationId: findUniqueUserRole
      description: Find one unique UserRole
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/UserRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/userRole/findFirst:
    get:
      operationId: findFirstUserRole
      description: Find the first UserRole matching the given condition
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/UserRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/userRole/findMany:
    get:
      operationId: findManyUserRole
      description: Find a list of UserRole
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/userRole/update:
    patch:
      operationId: updateUserRole
      description: Update a UserRole
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/UserRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRoleUpdateArgs"
  /api/userRole/updateMany:
    patch:
      operationId: updateManyUserRole
      description: Update UserRoles matching the given condition
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRoleUpdateManyArgs"
  /api/userRole/upsert:
    post:
      operationId: upsertUserRole
      description: Upsert a UserRole
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/UserRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRoleUpsertArgs"
  /api/userRole/delete:
    delete:
      operationId: deleteUserRole
      description: Delete one unique UserRole
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/UserRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/userRole/deleteMany:
    delete:
      operationId: deleteManyUserRole
      description: Delete UserRoles matching the given condition
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/userRole/count:
    get:
      operationId: countUserRole
      description: Find a list of UserRole
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/UserRoleCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/userRole/aggregate:
    get:
      operationId: aggregateUserRole
      description: Aggregate UserRoles
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateUserRole"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/userRole/groupBy:
    get:
      operationId: groupByUserRole
      description: Group UserRoles by fields
      tags:
        - userRole
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserRoleGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/post/create:
    post:
      operationId: createPost
      description: Create a new Post
      tags:
        - post
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreateArgs"
  /api/post/createMany:
    post:
      operationId: createManyPost
      description: Create several Post
      tags:
        - post
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreateManyArgs"
  /api/post/findUnique:
    get:
      operationId: findUniquePost
      description: Find one unique Post
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/post/findFirst:
    get:
      operationId: findFirstPost
      description: Find the first Post matching the given condition
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/post/findMany:
    get:
      operationId: findManyPost
      description: Find a list of Post
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/post/update:
    patch:
      operationId: updatePost
      description: Update a Post
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUpdateArgs"
  /api/post/updateMany:
    patch:
      operationId: updateManyPost
      description: Update Posts matching the given condition
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUpdateManyArgs"
  /api/post/upsert:
    post:
      operationId: upsertPost
      description: Upsert a Post
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUpsertArgs"
  /api/post/delete:
    delete:
      operationId: deletePost
      description: Delete one unique Post
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/post/deleteMany:
    delete:
      operationId: deleteManyPost
      description: Delete Posts matching the given condition
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/post/count:
    get:
      operationId: countPost
      description: Find a list of Post
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/PostCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/post/aggregate:
    get:
      operationId: aggregatePost
      description: Aggregate Posts
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregatePost"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/post/groupBy:
    get:
      operationId: groupByPost
      description: Group Posts by fields
      tags:
        - post
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/category/create:
    post:
      operationId: createCategory
      description: Create a new Category
      tags:
        - category
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryCreateArgs"
  /api/category/createMany:
    post:
      operationId: createManyCategory
      description: Create several Category
      tags:
        - category
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryCreateManyArgs"
  /api/category/findUnique:
    get:
      operationId: findUniqueCategory
      description: Find one unique Category
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/category/findFirst:
    get:
      operationId: findFirstCategory
      description: Find the first Category matching the given condition
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/category/findMany:
    get:
      operationId: findManyCategory
      description: Find a list of Category
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/category/update:
    patch:
      operationId: updateCategory
      description: Update a Category
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryUpdateArgs"
  /api/category/updateMany:
    patch:
      operationId: updateManyCategory
      description: Update Categorys matching the given condition
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryUpdateManyArgs"
  /api/category/upsert:
    post:
      operationId: upsertCategory
      description: Upsert a Category
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryUpsertArgs"
  /api/category/delete:
    delete:
      operationId: deleteCategory
      description: Delete one unique Category
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/category/deleteMany:
    delete:
      operationId: deleteManyCategory
      description: Delete Categorys matching the given condition
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/category/count:
    get:
      operationId: countCategory
      description: Find a list of Category
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/CategoryCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/category/aggregate:
    get:
      operationId: aggregateCategory
      description: Aggregate Categorys
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateCategory"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/category/groupBy:
    get:
      operationId: groupByCategory
      description: Group Categorys by fields
      tags:
        - category
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CategoryGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/casbinRule/create:
    post:
      operationId: createCasbinRule
      description: Create a new CasbinRule
      tags:
        - casbinRule
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/CasbinRule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CasbinRuleCreateArgs"
  /api/casbinRule/createMany:
    post:
      operationId: createManyCasbinRule
      description: Create several CasbinRule
      tags:
        - casbinRule
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CasbinRuleCreateManyArgs"
  /api/casbinRule/findUnique:
    get:
      operationId: findUniqueCasbinRule
      description: Find one unique CasbinRule
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/CasbinRule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasbinRuleFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/casbinRule/findFirst:
    get:
      operationId: findFirstCasbinRule
      description: Find the first CasbinRule matching the given condition
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/CasbinRule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasbinRuleFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/casbinRule/findMany:
    get:
      operationId: findManyCasbinRule
      description: Find a list of CasbinRule
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CasbinRule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasbinRuleFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/casbinRule/update:
    patch:
      operationId: updateCasbinRule
      description: Update a CasbinRule
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/CasbinRule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CasbinRuleUpdateArgs"
  /api/casbinRule/updateMany:
    patch:
      operationId: updateManyCasbinRule
      description: Update CasbinRules matching the given condition
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CasbinRuleUpdateManyArgs"
  /api/casbinRule/upsert:
    post:
      operationId: upsertCasbinRule
      description: Upsert a CasbinRule
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/CasbinRule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CasbinRuleUpsertArgs"
  /api/casbinRule/delete:
    delete:
      operationId: deleteCasbinRule
      description: Delete one unique CasbinRule
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/CasbinRule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasbinRuleDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/casbinRule/deleteMany:
    delete:
      operationId: deleteManyCasbinRule
      description: Delete CasbinRules matching the given condition
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasbinRuleDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/casbinRule/count:
    get:
      operationId: countCasbinRule
      description: Find a list of CasbinRule
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/CasbinRuleCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasbinRuleCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/casbinRule/aggregate:
    get:
      operationId: aggregateCasbinRule
      description: Aggregate CasbinRules
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateCasbinRule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasbinRuleAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/casbinRule/groupBy:
    get:
      operationId: groupByCasbinRule
      description: Group CasbinRules by fields
      tags:
        - casbinRule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CasbinRuleGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasbinRuleGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteProject/create:
    post:
      operationId: createFrontRouteProject
      description: Create a new FrontRouteProject
      tags:
        - frontRouteProject
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteProject"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteProjectCreateArgs"
  /api/frontRouteProject/createMany:
    post:
      operationId: createManyFrontRouteProject
      description: Create several FrontRouteProject
      tags:
        - frontRouteProject
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteProjectCreateManyArgs"
  /api/frontRouteProject/findUnique:
    get:
      operationId: findUniqueFrontRouteProject
      description: Find one unique FrontRouteProject
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteProject"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteProjectFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteProject/findFirst:
    get:
      operationId: findFirstFrontRouteProject
      description: Find the first FrontRouteProject matching the given condition
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteProject"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteProjectFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteProject/findMany:
    get:
      operationId: findManyFrontRouteProject
      description: Find a list of FrontRouteProject
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FrontRouteProject"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteProjectFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteProject/update:
    patch:
      operationId: updateFrontRouteProject
      description: Update a FrontRouteProject
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteProject"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteProjectUpdateArgs"
  /api/frontRouteProject/updateMany:
    patch:
      operationId: updateManyFrontRouteProject
      description: Update FrontRouteProjects matching the given condition
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteProjectUpdateManyArgs"
  /api/frontRouteProject/upsert:
    post:
      operationId: upsertFrontRouteProject
      description: Upsert a FrontRouteProject
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteProject"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteProjectUpsertArgs"
  /api/frontRouteProject/delete:
    delete:
      operationId: deleteFrontRouteProject
      description: Delete one unique FrontRouteProject
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteProject"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteProjectDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteProject/deleteMany:
    delete:
      operationId: deleteManyFrontRouteProject
      description: Delete FrontRouteProjects matching the given condition
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteProjectDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteProject/count:
    get:
      operationId: countFrontRouteProject
      description: Find a list of FrontRouteProject
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/FrontRouteProjectCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteProjectCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteProject/aggregate:
    get:
      operationId: aggregateFrontRouteProject
      description: Aggregate FrontRouteProjects
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateFrontRouteProject"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteProjectAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteProject/groupBy:
    get:
      operationId: groupByFrontRouteProject
      description: Group FrontRouteProjects by fields
      tags:
        - frontRouteProject
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FrontRouteProjectGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteProjectGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteModule/create:
    post:
      operationId: createFrontRouteModule
      description: Create a new FrontRouteModule
      tags:
        - frontRouteModule
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteModule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteModuleCreateArgs"
  /api/frontRouteModule/createMany:
    post:
      operationId: createManyFrontRouteModule
      description: Create several FrontRouteModule
      tags:
        - frontRouteModule
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteModuleCreateManyArgs"
  /api/frontRouteModule/findUnique:
    get:
      operationId: findUniqueFrontRouteModule
      description: Find one unique FrontRouteModule
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteModule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteModuleFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteModule/findFirst:
    get:
      operationId: findFirstFrontRouteModule
      description: Find the first FrontRouteModule matching the given condition
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteModule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteModuleFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteModule/findMany:
    get:
      operationId: findManyFrontRouteModule
      description: Find a list of FrontRouteModule
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FrontRouteModule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteModuleFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteModule/update:
    patch:
      operationId: updateFrontRouteModule
      description: Update a FrontRouteModule
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteModule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteModuleUpdateArgs"
  /api/frontRouteModule/updateMany:
    patch:
      operationId: updateManyFrontRouteModule
      description: Update FrontRouteModules matching the given condition
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteModuleUpdateManyArgs"
  /api/frontRouteModule/upsert:
    post:
      operationId: upsertFrontRouteModule
      description: Upsert a FrontRouteModule
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteModule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontRouteModuleUpsertArgs"
  /api/frontRouteModule/delete:
    delete:
      operationId: deleteFrontRouteModule
      description: Delete one unique FrontRouteModule
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/FrontRouteModule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteModuleDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteModule/deleteMany:
    delete:
      operationId: deleteManyFrontRouteModule
      description: Delete FrontRouteModules matching the given condition
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteModuleDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteModule/count:
    get:
      operationId: countFrontRouteModule
      description: Find a list of FrontRouteModule
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/FrontRouteModuleCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteModuleCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteModule/aggregate:
    get:
      operationId: aggregateFrontRouteModule
      description: Aggregate FrontRouteModules
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateFrontRouteModule"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteModuleAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/frontRouteModule/groupBy:
    get:
      operationId: groupByFrontRouteModule
      description: Group FrontRouteModules by fields
      tags:
        - frontRouteModule
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FrontRouteModuleGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontRouteModuleGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/auditRecord/create:
    post:
      operationId: createAuditRecord
      description: Create a new AuditRecord
      tags:
        - auditRecord
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AuditRecord"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditRecordCreateArgs"
  /api/auditRecord/createMany:
    post:
      operationId: createManyAuditRecord
      description: Create several AuditRecord
      tags:
        - auditRecord
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditRecordCreateManyArgs"
  /api/auditRecord/findUnique:
    get:
      operationId: findUniqueAuditRecord
      description: Find one unique AuditRecord
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AuditRecord"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditRecordFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/auditRecord/findFirst:
    get:
      operationId: findFirstAuditRecord
      description: Find the first AuditRecord matching the given condition
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AuditRecord"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditRecordFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/auditRecord/findMany:
    get:
      operationId: findManyAuditRecord
      description: Find a list of AuditRecord
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AuditRecord"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditRecordFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/auditRecord/update:
    patch:
      operationId: updateAuditRecord
      description: Update a AuditRecord
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AuditRecord"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditRecordUpdateArgs"
  /api/auditRecord/updateMany:
    patch:
      operationId: updateManyAuditRecord
      description: Update AuditRecords matching the given condition
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditRecordUpdateManyArgs"
  /api/auditRecord/upsert:
    post:
      operationId: upsertAuditRecord
      description: Upsert a AuditRecord
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AuditRecord"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditRecordUpsertArgs"
  /api/auditRecord/delete:
    delete:
      operationId: deleteAuditRecord
      description: Delete one unique AuditRecord
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AuditRecord"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditRecordDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/auditRecord/deleteMany:
    delete:
      operationId: deleteManyAuditRecord
      description: Delete AuditRecords matching the given condition
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditRecordDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/auditRecord/count:
    get:
      operationId: countAuditRecord
      description: Find a list of AuditRecord
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/AuditRecordCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditRecordCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/auditRecord/aggregate:
    get:
      operationId: aggregateAuditRecord
      description: Aggregate AuditRecords
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateAuditRecord"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditRecordAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/auditRecord/groupBy:
    get:
      operationId: groupByAuditRecord
      description: Group AuditRecords by fields
      tags:
        - auditRecord
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AuditRecordGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditRecordGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/log/create:
    post:
      operationId: createLog
      description: Create a new Log
      tags:
        - log
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Log"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogCreateArgs"
  /api/log/createMany:
    post:
      operationId: createManyLog
      description: Create several Log
      tags:
        - log
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogCreateManyArgs"
  /api/log/findUnique:
    get:
      operationId: findUniqueLog
      description: Find one unique Log
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Log"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/log/findFirst:
    get:
      operationId: findFirstLog
      description: Find the first Log matching the given condition
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Log"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/log/findMany:
    get:
      operationId: findManyLog
      description: Find a list of Log
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Log"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/log/update:
    patch:
      operationId: updateLog
      description: Update a Log
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Log"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogUpdateArgs"
  /api/log/updateMany:
    patch:
      operationId: updateManyLog
      description: Update Logs matching the given condition
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogUpdateManyArgs"
  /api/log/upsert:
    post:
      operationId: upsertLog
      description: Upsert a Log
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Log"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogUpsertArgs"
  /api/log/delete:
    delete:
      operationId: deleteLog
      description: Delete one unique Log
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Log"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/log/deleteMany:
    delete:
      operationId: deleteManyLog
      description: Delete Logs matching the given condition
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/log/count:
    get:
      operationId: countLog
      description: Find a list of Log
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/LogCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/log/aggregate:
    get:
      operationId: aggregateLog
      description: Aggregate Logs
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateLog"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/log/groupBy:
    get:
      operationId: groupByLog
      description: Group Logs by fields
      tags:
        - log
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LogGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/menu/create:
    post:
      operationId: createMenu
      description: Create a new Menu
      tags:
        - menu
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Menu"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuCreateArgs"
  /api/menu/createMany:
    post:
      operationId: createManyMenu
      description: Create several Menu
      tags:
        - menu
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuCreateManyArgs"
  /api/menu/findUnique:
    get:
      operationId: findUniqueMenu
      description: Find one unique Menu
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Menu"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/menu/findFirst:
    get:
      operationId: findFirstMenu
      description: Find the first Menu matching the given condition
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Menu"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/menu/findMany:
    get:
      operationId: findManyMenu
      description: Find a list of Menu
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Menu"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/menu/update:
    patch:
      operationId: updateMenu
      description: Update a Menu
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Menu"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuUpdateArgs"
  /api/menu/updateMany:
    patch:
      operationId: updateManyMenu
      description: Update Menus matching the given condition
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuUpdateManyArgs"
  /api/menu/upsert:
    post:
      operationId: upsertMenu
      description: Upsert a Menu
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Menu"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuUpsertArgs"
  /api/menu/delete:
    delete:
      operationId: deleteMenu
      description: Delete one unique Menu
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Menu"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/menu/deleteMany:
    delete:
      operationId: deleteManyMenu
      description: Delete Menus matching the given condition
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/menu/count:
    get:
      operationId: countMenu
      description: Find a list of Menu
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/MenuCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/menu/aggregate:
    get:
      operationId: aggregateMenu
      description: Aggregate Menus
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateMenu"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/menu/groupBy:
    get:
      operationId: groupByMenu
      description: Group Menus by fields
      tags:
        - menu
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MenuGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/dynamicPage/create:
    post:
      operationId: createDynamicPage
      description: Create a new DynamicPage
      tags:
        - dynamicPage
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/DynamicPage"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamicPageCreateArgs"
  /api/dynamicPage/createMany:
    post:
      operationId: createManyDynamicPage
      description: Create several DynamicPage
      tags:
        - dynamicPage
      security: []
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamicPageCreateManyArgs"
  /api/dynamicPage/findUnique:
    get:
      operationId: findUniqueDynamicPage
      description: Find one unique DynamicPage
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/DynamicPage"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicPageFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/dynamicPage/findFirst:
    get:
      operationId: findFirstDynamicPage
      description: Find the first DynamicPage matching the given condition
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/DynamicPage"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicPageFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/dynamicPage/findMany:
    get:
      operationId: findManyDynamicPage
      description: Find a list of DynamicPage
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DynamicPage"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicPageFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/dynamicPage/update:
    patch:
      operationId: updateDynamicPage
      description: Update a DynamicPage
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/DynamicPage"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamicPageUpdateArgs"
  /api/dynamicPage/updateMany:
    patch:
      operationId: updateManyDynamicPage
      description: Update DynamicPages matching the given condition
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamicPageUpdateManyArgs"
  /api/dynamicPage/upsert:
    post:
      operationId: upsertDynamicPage
      description: Upsert a DynamicPage
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/DynamicPage"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamicPageUpsertArgs"
  /api/dynamicPage/delete:
    delete:
      operationId: deleteDynamicPage
      description: Delete one unique DynamicPage
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/DynamicPage"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicPageDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/dynamicPage/deleteMany:
    delete:
      operationId: deleteManyDynamicPage
      description: Delete DynamicPages matching the given condition
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicPageDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/dynamicPage/count:
    get:
      operationId: countDynamicPage
      description: Find a list of DynamicPage
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/DynamicPageCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicPageCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/dynamicPage/aggregate:
    get:
      operationId: aggregateDynamicPage
      description: Aggregate DynamicPages
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateDynamicPage"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicPageAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /api/dynamicPage/groupBy:
    get:
      operationId: groupByDynamicPage
      description: Group DynamicPages by fields
      tags:
        - dynamicPage
      security: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DynamicPageGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicPageGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
