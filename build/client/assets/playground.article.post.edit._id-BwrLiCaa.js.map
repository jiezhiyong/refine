{"version":3,"file":"playground.article.post.edit._id-BwrLiCaa.js","sources":["../../../app/component-refine/auto-save-indicator/index.tsx","../../../app/component-refine/components/form.tsx","../../../app/component-refine/buttons/save.tsx","../../../app/routes/playground.article.post.edit.$id.tsx"],"sourcesContent":["import { AutoSaveIndicatorElements, BaseRecord, HttpError, useTranslate, UseUpdateReturnType } from '@refinedev/core';\nimport dayjs from 'dayjs';\nimport React from 'react';\n\nimport { cn } from '~/utils';\n\nexport type AutoSaveIndicatorProps<\n  TData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables = object,\n> = {\n  data?: UseUpdateReturnType<TData, TError, TVariables>['data'];\n  error?: UseUpdateReturnType<TData, TError, TVariables>['error'];\n  status: UseUpdateReturnType<TData, TError, TVariables>['status'];\n  elements?: AutoSaveIndicatorElements;\n};\n\nexport const AutoSaveIndicator: React.FC<AutoSaveIndicatorProps> = ({\n  status,\n  elements: {\n    success = <Message translationKey=\"autoSave.success\" defaultMessage=\"saved\" />,\n    error = <Message translationKey=\"autoSave.error\" defaultMessage=\"auto save failed\" />,\n    loading = <Message translationKey=\"autoSave.loading\" defaultMessage=\"saving ...\" />,\n    idle = <Message translationKey=\"autoSave.idle\" defaultMessage=\"waiting for changes ...\" />,\n  } = {},\n}) => {\n  switch (status) {\n    case 'success':\n      return <>{success}</>;\n    case 'error':\n      return <>{error}</>;\n    case 'loading':\n      return <>{loading}</>;\n    default:\n      return <>{idle}</>;\n  }\n};\n\nconst Message = ({ translationKey, defaultMessage }: { translationKey: string; defaultMessage: string }) => {\n  const translate = useTranslate();\n\n  return (\n    <span\n      className={cn('text-muted-foreground text-sm', {\n        'text-destructive': translationKey === 'autoSave.error',\n        'text-green-500': translationKey === 'autoSave.success',\n      })}\n    >\n      {translate(translationKey, defaultMessage)}\n      {translationKey === 'autoSave.success' && ` at ${dayjs().format('HH:mm:ss')}`}\n    </span>\n  );\n};\n","import { type BaseRecord, type HttpError, useBack, useParsed } from '@refinedev/core';\nimport type { UseFormReturnType } from '@refinedev/react-hook-form';\nimport { Undo2 } from 'lucide-react';\nimport { type DetailedHTMLProps, type FormHTMLAttributes, type PropsWithChildren, useRef } from 'react';\nimport { type FieldValues } from 'react-hook-form';\n\nimport { AutoSaveIndicator } from '~/component-refine';\nimport { Button } from '~/components-shadcn/button';\nimport { Card, CardContent, CardFooter } from '~/components-shadcn/card';\nimport { Form as FormUI } from '~/components-shadcn/form';\nimport { EnumAction } from '~/constants';\nimport { TAny } from '~/types';\nimport { cn } from '~/utils';\n\nimport { SaveButton } from '../buttons';\n\ntype NativeFormProps = Omit<DetailedHTMLProps<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, 'onSubmit'>;\n\nexport type FormProps<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = Record<string, unknown>,\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = PropsWithChildren &\n  UseFormReturnType<TQueryFnData, TError, TVariables, TContext, TData, TResponse, TResponseError> & {\n    formProps?: NativeFormProps;\n    isWatchable?: boolean;\n    hideCancel?: boolean;\n    autoSave?: boolean;\n    modifyingDataBeforeSubmission?: (values: TAny) => TAny;\n    className?: string;\n    formModalClose?: () => void;\n    recordItemId?: string;\n  };\n\nexport const Form = <\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = Record<string, unknown>,\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n>({\n  autoSave,\n  modifyingDataBeforeSubmission,\n  formProps,\n  isWatchable,\n  saveButtonProps,\n  className,\n  formModalClose,\n  recordItemId,\n  ...props\n}: FormProps<TQueryFnData, TError, TVariables, TContext, TData, TResponse, TResponseError>) => {\n  const watchable = useRef<boolean>(false);\n  const { resource: _resource, action } = useParsed();\n  const back = useBack();\n\n  const onBack = action !== EnumAction.list || typeof action !== 'undefined' ? back : undefined;\n\n  if (isWatchable && !watchable.current) {\n    watchable.current = true;\n    props.watch();\n  }\n\n  const onSubmit = props.handleSubmit((_data: TVariables) => {\n    const values = props.getValues();\n    const data = modifyingDataBeforeSubmission ? modifyingDataBeforeSubmission(values) : values;\n    props.refineCore.onFinish(data);\n\n    formModalClose?.();\n  });\n\n  const { disabled } = saveButtonProps || {};\n  return (\n    <FormUI {...props}>\n      <form {...formProps} onSubmit={onSubmit}>\n        <Card className={cn('mx-auto space-y-4 border-none p-8 shadow-none', className)}>\n          <CardContent className=\"space-y-4 p-0\">{props.children}</CardContent>\n\n          <CardFooter className=\"flex gap-x-2 p-0\">\n            <SaveButton\n              type=\"submit\"\n              recordItemId={recordItemId}\n              loading={props.refineCore.formLoading}\n              disabled={disabled || !props.formState.isDirty}\n            />\n\n            {!props.hideCancel && (\n              <Button\n                icon={<Undo2 />}\n                type=\"button\"\n                onClick={formModalClose || onBack}\n                disabled={props.refineCore.formLoading}\n                variant=\"outline\"\n              >\n                Cancel\n              </Button>\n            )}\n\n            {autoSave && (\n              <div className=\"ml-auto\">\n                <AutoSaveIndicator {...props.refineCore.autoSaveProps} />\n              </div>\n            )}\n          </CardFooter>\n        </Card>\n      </form>\n    </FormUI>\n  );\n};\n","import { Slot } from '@radix-ui/react-slot';\nimport { CanAccess, useSaveButton } from '@refinedev/core';\nimport { CheckCheck } from 'lucide-react';\nimport type { FC } from 'react';\n\nimport { Button } from '~/components-shadcn/button';\n\nimport { SaveButtonProps } from '../types';\n\nexport const SaveButton: FC<SaveButtonProps> = ({\n  hideText = false,\n  children,\n  accessControl,\n  access,\n  resource,\n  recordItemId,\n  ...props\n}) => {\n  const { label } = useSaveButton();\n  const Com = !accessControl?.enabled ? Slot : CanAccess;\n\n  if (accessControl?.hideIfUnauthorized && accessControl.enabled) {\n    return null;\n  }\n\n  return (\n    <Com\n      params={{\n        id: recordItemId,\n      }}\n      resource={resource}\n      action=\"save\"\n      {...access}\n    >\n      <Button icon={<CheckCheck />} {...props}>\n        {!hideText && (children ?? label)}\n      </Button>\n    </Com>\n  );\n};\n\nSaveButton.displayName = 'SaveButton';\n","import { zodResolver } from '@hookform/resolvers/zod';\nimport { Post } from '@prisma/client';\nimport { GetOneResponse, RedirectAction, useModalReturnType, useSelect } from '@refinedev/core';\nimport { useForm } from '@refinedev/react-hook-form';\nimport { LoaderFunctionArgs, MetaFunction } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { useCallback } from 'react';\nimport { z } from 'zod';\n\nimport { CloneButton, DeleteButton, ShowButton } from '~/component-refine';\nimport { Combobox, Field, Form, Select } from '~/component-refine/components';\nimport { PageError } from '~/components';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '~/components-shadcn/dialog';\nimport { Input } from '~/components-shadcn/input';\nimport { Textarea } from '~/components-shadcn/textarea';\nimport { EnumAction, EnumResource } from '~/constants';\nimport { dataService } from '~/services';\nimport { HandleFunction, POST_STATUS_LIST } from '~/types';\nimport { getDefaultTitle } from '~/utils';\n\n// 元数据\nexport const meta: MetaFunction = ({ matches }) => {\n  return [{ title: getDefaultTitle(matches) }];\n};\n\n// 创建应用程序约定\nexport const handle: HandleFunction = {\n  uiTools: () => {\n    return <UiTools />;\n  },\n};\n\n// 页面初始化时的`GET`请求 && 表单`GET`请求\nexport async function loader({ params }: LoaderFunctionArgs) {\n  const [initialData] = await Promise.all([\n    dataService.getOne<Post>({\n      resource: EnumResource.post,\n      id: params?.id || '',\n    }),\n  ]);\n\n  return {\n    initialData,\n  };\n}\n\n// UI\nexport default function PostEdit() {\n  const { initialData } = useLoaderData<typeof loader>();\n  return <PostForm initialData={initialData} />;\n}\n\nfunction UiTools() {\n  return (\n    <div className=\"flex items-center gap-1 text-sm\">\n      <ShowButton variant=\"ghost\" size=\"icon\" />\n      <DeleteButton variant=\"ghost\" size=\"icon\" />\n      <CloneButton variant=\"ghost\" size=\"icon\" />\n    </div>\n  );\n}\n\n// 错误边界处理\nexport function ErrorBoundary() {\n  return <PageError />;\n}\n\n// 编辑表单\nconst formSchema = z.object({\n  title: z.string().min(2, { message: 'Title must be at least 2 characters.' }),\n  content: z.string().min(2),\n  status: z.string(),\n  categoryId: z.string(),\n});\ntype TFormSchema = z.infer<typeof formSchema>;\n\n// 过滤数据，只保留 formSchema 中定义的字段\nconst filterFormData = (data: Partial<Post> | undefined) => {\n  if (!data) return undefined;\n\n  return {\n    title: data.title,\n    content: data.content,\n    status: data.status,\n    categoryId: data.categoryId,\n  };\n};\n\nexport const PostForm = ({\n  className,\n  redirect = EnumAction.list,\n  initialData,\n  formModalClose,\n}: {\n  className?: string;\n  redirect?: RedirectAction;\n  initialData?: GetOneResponse<Post>;\n  formModalClose?: () => void;\n}) => {\n  const categoryOptions = useSelect({ resource: EnumResource.category }).options;\n\n  const { data } = initialData || {};\n\n  const enableAutoSave = true; // 注意：autoSave 不会触发表单验证\n  const form = useForm<TFormSchema>({\n    resolver: zodResolver(formSchema),\n    defaultValues: filterFormData(data),\n    warnWhenUnsavedChanges: true,\n    refineCoreProps: {\n      resource: EnumResource.post,\n      action: data?.id ? EnumAction.edit : EnumAction.create,\n      id: data?.id,\n      queryOptions: initialData\n        ? {\n            queryFn: () => initialData,\n            initialData: initialData,\n          }\n        : undefined,\n      redirect,\n      autoSave: {\n        enabled: enableAutoSave,\n        debounce: 2000,\n        invalidateOnUnmount: true,\n        onFinish: (values) => {\n          return modifyingDataBeforeSubmission(values as TFormSchema);\n        },\n      },\n    },\n  });\n\n  // 提交前修改数据，注意：返回新的数据对象而不是修改原对象\n  const modifyingDataBeforeSubmission = useCallback((values: TFormSchema) => {\n    return { ...values };\n  }, []);\n\n  return (\n    <Form\n      {...form}\n      autoSave={enableAutoSave}\n      modifyingDataBeforeSubmission={modifyingDataBeforeSubmission}\n      className={className}\n      formModalClose={formModalClose}\n      recordItemId={data?.id}\n    >\n      <Field {...form} name=\"title\" label=\"Title\">\n        <Input placeholder=\"Title\" />\n      </Field>\n\n      <Field {...form} name=\"categoryId\" label=\"Category\">\n        <Combobox options={categoryOptions} popoverProps={{ modal: Boolean(formModalClose) }} />\n      </Field>\n\n      <Field {...form} name=\"status\" label=\"Status\">\n        <Select options={POST_STATUS_LIST.map((status) => ({ label: status, value: status }))} />\n      </Field>\n\n      <Field {...form} name=\"content\" label=\"Content\">\n        <Textarea placeholder=\"Content\" rows={10} />\n      </Field>\n    </Form>\n  );\n};\n\nexport function PostFormModal(props: useModalReturnType & { record?: Post }) {\n  const { visible, close, record } = props;\n\n  return (\n    <Dialog open={visible} onOpenChange={close}>\n      <DialogContent className=\"max-w-6xl\">\n        <DialogHeader className=\"border-b pb-4\">\n          <DialogTitle>Edit Post</DialogTitle>\n          <DialogDescription>This is a Demo for Edit Form on Modal.</DialogDescription>\n        </DialogHeader>\n\n        <PostForm className=\"p-0\" formModalClose={close} initialData={record ? { data: { ...record } } : undefined} />\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":["AutoSaveIndicator","status","success","jsx","Message","error","loading","idle","translationKey","defaultMessage","translate","useTranslate","jsxs","cn","dayjs","Form","autoSave","modifyingDataBeforeSubmission","formProps","isWatchable","saveButtonProps","className","formModalClose","recordItemId","props","watchable","useRef","_resource","action","useParsed","back","useBack","onBack","EnumAction","onSubmit","_data","values","data","disabled","FormUI","Card","CardContent","CardFooter","SaveButton","Button","Undo2","hideText","children","accessControl","access","resource","label","useSaveButton","Com","CanAccess","Slot","CheckCheck","meta","matches","title","getDefaultTitle","handle","uiTools","UiTools","PostEdit","initialData","useLoaderData","PostForm","ShowButton","variant","size","DeleteButton","CloneButton","ErrorBoundary","PageError","formSchema","z","object","string","min","message","content","categoryId","filterFormData","redirect","list","categoryOptions","useSelect","EnumResource","category","options","enableAutoSave","form","useForm","resolver","zodResolver","defaultValues","warnWhenUnsavedChanges","refineCoreProps","post","id","edit","create","queryOptions","queryFn","enabled","debounce","invalidateOnUnmount","onFinish","useCallback","Field","name","Input","placeholder","Combobox","popoverProps","modal","Boolean","Select","POST_STATUS_LIST","map","value","Textarea","rows","PostFormModal","visible","close","record","Dialog","open","onOpenChange","DialogContent","DialogHeader","DialogTitle","DialogDescription"],"mappings":"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"}