{"version":3,"file":"register-vc3lN4Sd.js","sources":["../../../app/components/form-register.tsx","../../../app/routes/register.tsx"],"sourcesContent":["import { Form, Link, useActionData, useNavigation, useSearchParams } from '@remix-run/react';\nimport { GalleryVerticalEnd } from 'lucide-react';\n\nimport { Button } from '~/components-shadcn/button';\nimport { Input } from '~/components-shadcn/input';\nimport { Label } from '~/components-shadcn/label';\n\nimport { ErrorMessage } from './error';\nimport { PrivacyPolicy } from './privacy-policy';\nimport { TcskOAuth2 } from './tcsk-oauth2';\n\n// 定义错误类型\ninterface ActionData {\n  errors?: {\n    email?: string[];\n    code?: string[];\n    password?: string[];\n    default?: string[];\n  };\n}\n\n// 注册表单\nexport function RegisterForm() {\n  const { errors } = useActionData<ActionData>() || {};\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo') || '/';\n  const navigation = useNavigation();\n  // const { open } = useNotification();\n  // const [isSending, setIsSending] = useState(false);\n  // const [countdown, setCountdown] = useState(0);\n\n  // async function sendVerificationCode(email: string) {\n  //   setIsSending(true);\n  //   try {\n  //     const response = await fetch('/api/send-code', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({ email }),\n  //     });\n\n  //     const data = await response.json();\n\n  //     if (!response.ok) {\n  //       throw new Error(data.error || '发送验证码失败');\n  //     }\n\n  //     open?.({\n  //       key: 'register-email-sent',\n  //       message: '验证码已发送',\n  //       description: '请查看您的邮箱',\n  //       type: 'success',\n  //     });\n\n  //     // 开始倒计时\n  //     setCountdown(60);\n  //     const timer = setInterval(() => {\n  //       setCountdown((prev) => {\n  //         if (prev <= 1) {\n  //           clearInterval(timer);\n  //           return 0;\n  //         }\n  //         return prev - 1;\n  //       });\n  //     }, 1000);\n  //   } catch (error) {\n  //     open?.({\n  //       key: 'register-email-sent',\n  //       message: 'Error',\n  //       description: error instanceof Error ? error.message : '发送验证码失败',\n  //       type: 'error',\n  //     });\n  //   } finally {\n  //     setIsSending(false);\n  //   }\n  // }\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Form method=\"post\">\n        <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n\n        <div className=\"flex flex-col gap-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Link prefetch=\"intent\" viewTransition to=\"/\" className=\"flex flex-col items-center gap-2 font-medium\">\n              <div className=\"flex h-8 w-8 items-center justify-center rounded-md\">\n                <GalleryVerticalEnd className=\"size-6\" />\n              </div>\n              <span className=\"sr-only\">Remix Inc.</span>\n            </Link>\n            <h1 className=\"text-xl font-bold\">Welcome to Signup OSS Inc.</h1>\n            <div className=\"text-center text-sm\">\n              {`Already has an account? `}\n              <Link prefetch=\"intent\" viewTransition to=\"/login\" replace className=\"underline underline-offset-4\">\n                Sign in\n              </Link>\n            </div>\n          </div>\n\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  name=\"email\"\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Goodman@example.com\"\n                  required\n                  autoFocus\n                  autoComplete=\"email\"\n                  defaultValue=\"administrator@goodman.com\"\n                />\n                {/* <Button\n                  type=\"button\"\n                  disabled={isSending || countdown > 0 || !field.value}\n                  variant=\"outline\"\n                  onClick={sendVerificationCode}\n                >\n                  {countdown > 0 ? `${countdown}s` : 'Send Code'}\n                </Button> */}\n              </div>\n              <ErrorMessage error={errors?.email?.[0]} />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"code\">Validate Code</Label>\n              <Input name=\"code\" id=\"code\" type=\"code\" required minLength={6} maxLength={6} />\n              <ErrorMessage error={errors?.code?.[0]} />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                name=\"password\"\n                id=\"password\"\n                type=\"password\"\n                required\n                autoComplete=\"new-password\"\n                minLength={6}\n                maxLength={50}\n                defaultValue=\"Abc@12345678\"\n              />\n              <ErrorMessage error={errors?.password?.[0]} />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Button type=\"submit\" className=\"w-full\" disabled={navigation.state === 'submitting'}>\n                Register\n              </Button>\n              <ErrorMessage error={errors?.default?.[0]} />\n            </div>\n          </div>\n\n          <div className=\"after:border-border relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t\">\n            <span className=\"bg-background text-muted-foreground relative z-10 px-2\">or</span>\n          </div>\n\n          <TcskOAuth2 redirectTo={redirectTo} />\n        </div>\n      </Form>\n\n      <PrivacyPolicy />\n    </div>\n  );\n}\n","import { type ActionFunctionArgs, type MetaFunction, redirect } from '@remix-run/node';\nimport { z } from 'zod';\n\nimport { RegisterForm } from '~/components';\nimport { EnumAuthProvider } from '~/constants';\nimport { createUser, getUserByEmail } from '~/models/user.server';\nimport { typedFormError } from '~/utils/typed-form-error';\n\n// 定义表单验证 schema\nconst registerSchema = z.object({\n  email: z.string().email('请输入有效的邮箱地址'),\n  password: z.string().min(6, '密码至少需要6个字符').max(50, '密码不能超过50个字符'),\n  redirectTo: z.string().optional(),\n});\n\n// 元数据\nexport const meta: MetaFunction = () => {\n  return [{ title: 'Register' }];\n};\n\n// Action 处理函数\nexport async function action({ request }: ActionFunctionArgs) {\n  try {\n    const formData = await request.formData();\n    const rawData = Object.fromEntries(formData) as z.infer<typeof registerSchema>;\n\n    const { email, password } = registerSchema.parse(rawData);\n    const existingUser = await getUserByEmail(email);\n\n    if (existingUser) {\n      throw { email: ['A user already exists with this email.'] };\n    }\n\n    await createUser({ email, password, provider: EnumAuthProvider.userpass });\n\n    return redirect(`/login?email=${email}`);\n  } catch (error) {\n    return typedFormError(error);\n  }\n}\n\n// UI\nexport default function Register() {\n  return (\n    <div className=\"bg-background flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10\">\n      <div className=\"w-full max-w-sm\">\n        <RegisterForm />\n      </div>\n    </div>\n  );\n}\n"],"names":["RegisterForm","errors","useActionData","searchParams","useSearchParams","redirectTo","navigation","useNavigation","jsxs","Form","jsx","Link","GalleryVerticalEnd","Label","Input","ErrorMessage","_a","_b","_c","Button","_d","TcskOAuth2","PrivacyPolicy","meta","title","Register","className","children"],"mappings":"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"}